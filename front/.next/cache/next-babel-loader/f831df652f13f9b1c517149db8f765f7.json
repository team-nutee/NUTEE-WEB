{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST, EDIT_NICKNAME_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // 회원가입 실패\n    alert('이미 존재하는 아이디입니다.');\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\n\n  }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\n}\n\nfunction* loadUser(action) {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    // yield call(followAPI);\n    const result = yield call(followAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    // yield call(unfollowAPI);\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId, offset = 0, limit = 3) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId || 0}/followers?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowersAPI, action.data, action.offset);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction loadFollowingsAPI(userId, offset = 0, limit = 3) {\n  // 서버에 요청을 보내는 부분\n  return axios.get(`/user/${userId || 0}/followings?offset=${offset}&limit=${limit}`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(loadFollowingsAPI, action.data, action.offset);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction removeFollowerAPI(userId) {\n  // 서버에 요청을 보내는 부분\n  return axios.delete(`/user/${userId}/follower`, {\n    withCredentials: true\n  });\n}\n\nfunction* removeFollower(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction editNicknameAPI(nickname) {\n  // 서버에 요청을 보내는 부분\n  return axios.patch('/user/nickname', {\n    nickname\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* editNickname(action) {\n  try {\n    // yield call(loadFollowersAPI);\n    const result = yield call(editNicknameAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: EDIT_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: EDIT_NICKNAME_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEditNickname() {\n  yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower), fork(watchEditNickname)]);\n}","map":{"version":3,"sources":["C:/Users/mf311/IdeaProjects/NUTEE-WEB/front/sagas/user.js"],"names":["all","call","fork","put","takeEvery","axios","EDIT_NICKNAME_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","FOLLOW_USER_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","REMOVE_FOLLOWER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","alert","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","offset","limit","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","removeFollowerAPI","removeFollower","watchRemoveFollower","editNicknameAPI","nickname","patch","editNickname","watchEditNickname","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    EDIT_NICKNAME_FAILURE, EDIT_NICKNAME_REQUEST,\r\n    EDIT_NICKNAME_SUCCESS,\r\n    FOLLOW_USER_FAILURE,\r\n    FOLLOW_USER_REQUEST,\r\n    FOLLOW_USER_SUCCESS,\r\n    LOAD_FOLLOWERS_FAILURE,\r\n    LOAD_FOLLOWERS_REQUEST,\r\n    LOAD_FOLLOWERS_SUCCESS,\r\n    LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST,\r\n    LOAD_FOLLOWINGS_SUCCESS,\r\n    LOAD_USER_FAILURE,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    UNFOLLOW_USER_FAILURE,\r\n    UNFOLLOW_USER_REQUEST,\r\n    UNFOLLOW_USER_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(loginData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction signUpAPI(signUpData) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n            yield put({ // put은 dispatch 동일\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) { // 회원가입 실패\r\n        alert('이미 존재하는 아이디입니다.');\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction logOutAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // yield call(logOutAPI);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(userId ? `/user/${userId}` : '/user/', {\r\n        withCredentials: true, // 클라이언트에서 요청 보낼 때는 브라우저가 쿠키를 같이 동봉해줘요\r\n    }); // 서버사이드렌더링일 때는, 브라우저가 없어요.\r\n}\r\n\r\nfunction* loadUser(action) {\r\n    try {\r\n        // yield call(loadUserAPI);\r\n        const result = yield call(loadUserAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n            me: !action.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction followAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post(`/user/${userId}/follow`, {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        // yield call(followAPI);\r\n        const result = yield call(followAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: FOLLOW_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: FOLLOW_USER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeEvery(FOLLOW_USER_REQUEST, follow);\r\n}\r\n\r\nfunction unfollowAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        // yield call(unfollowAPI);\r\n        const result = yield call(unfollowAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: UNFOLLOW_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: UNFOLLOW_USER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\r\n}\r\n\r\nfunction loadFollowersAPI(userId, offset = 0, limit = 3) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(`/user/${userId || 0}/followers?offset=${offset}&limit=${limit}`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* loadFollowers(action) {\r\n    try {\r\n        // yield call(loadFollowersAPI);\r\n        const result = yield call(loadFollowersAPI, action.data, action.offset);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOAD_FOLLOWERS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_FOLLOWERS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadFollowers() {\r\n    yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n}\r\n\r\nfunction loadFollowingsAPI(userId, offset = 0, limit = 3) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get(`/user/${userId || 0}/followings?offset=${offset}&limit=${limit}`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* loadFollowings(action) {\r\n    try {\r\n        // yield call(loadFollowersAPI);\r\n        const result = yield call(loadFollowingsAPI, action.data, action.offset);\r\n        yield put({ // put은 dispatch 동일\r\n            type: LOAD_FOLLOWINGS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_FOLLOWINGS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadFollowings() {\r\n    yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\r\n}\r\n\r\nfunction removeFollowerAPI(userId) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.delete(`/user/${userId}/follower`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* removeFollower(action) {\r\n    try {\r\n        // yield call(loadFollowersAPI);\r\n        const result = yield call(removeFollowerAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: REMOVE_FOLLOWER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: REMOVE_FOLLOWER_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRemoveFollower() {\r\n    yield takeEvery(REMOVE_FOLLOWER_REQUEST, removeFollower);\r\n}\r\n\r\nfunction editNicknameAPI(nickname) {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.patch('/user/nickname', { nickname }, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* editNickname(action) {\r\n    try {\r\n        // yield call(loadFollowersAPI);\r\n        const result = yield call(editNicknameAPI, action.data);\r\n        yield put({ // put은 dispatch 동일\r\n            type: EDIT_NICKNAME_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // loginAPI 실패\r\n        console.error(e);\r\n        yield put({\r\n            type: EDIT_NICKNAME_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchEditNickname() {\r\n    yield takeEvery(EDIT_NICKNAME_REQUEST, editNickname);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLoadFollowers),\r\n        fork(watchLoadFollowings),\r\n        fork(watchRemoveFollower),\r\n        fork(watchEditNickname),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}