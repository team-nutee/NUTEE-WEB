{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { ADD_COMMENT_REQUEST, LIKE_POST_REQUEST, LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uAE00\\uC744 \\uACF5\\uC720\\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n    ,\n    loading: true\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/mf311/IdeaProjects/NUTEE-WEB/front/containers/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Popover","Link","PropTypes","useDispatch","useSelector","styled","ADD_COMMENT_REQUEST","LIKE_POST_REQUEST","LOAD_COMMENTS_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","createdAt","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    ADD_COMMENT_REQUEST,\r\n    LIKE_POST_REQUEST,\r\n    LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST,\r\n    RETWEET_REQUEST,\r\n    UNLIKE_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport PostImages from '../components/PostImages';\r\nimport PostCardContent from '../components/PostCardContent';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type: LOAD_COMMENTS_REQUEST,\r\n                data: post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n                content: commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다!');\r\n        }\r\n        if (liked) { // 좋아요 누른 상태\r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        } else { // 좋아요 안 누른 상태\r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id,\r\n            });\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [me && me.id, post && post.id]);\r\n\r\n    const onFollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type: FOLLOW_USER_REQUEST,\r\n            data: userId,\r\n        });\r\n    }, []);\r\n\r\n    const onUnfollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type: UNFOLLOW_USER_REQUEST,\r\n            data: userId,\r\n        });\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(userId => () => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: userId,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Card\r\n                cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n                    <Icon\r\n                        type=\"heart\"\r\n                        key=\"heart\"\r\n                        theme={liked ? 'twoTone' : 'outlined'}\r\n                        twoToneColor=\"#eb2f96\"\r\n                        onClick={onToggleLike}\r\n                    />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {me && post.UserId === me.id\r\n                                    ? (\r\n                                        <>\r\n                                            <Button>수정</Button>\r\n                                            <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                                        </>\r\n                                    )\r\n                                    : <Button>신고</Button>}\r\n                            </Button.Group>\r\n                        )}\r\n                    >\r\n                        <Icon type=\"ellipsis\" />\r\n                    </Popover>,\r\n                ]}\r\n                title={post.RetweetId ? `${post.User.nickname}님이 글을 공유하였습니다.` : null}\r\n                extra={!me || post.User.id === me.id\r\n                    ? null\r\n                    : me.Followings && me.Followings.find(v => v.id === post.User.id)\r\n                        ? <Button onClick={onUnfollow(post.User.id)}>언팔로우</Button>\r\n                        : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n                }\r\n            >\r\n                {post.RetweetId && post.Retweet\r\n                    ? (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}/>}\r\n                        >\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link\r\n                                        href={{pathname: '/user', query: {id: post.Retweet.User.id}}}\r\n                                        as={`/user/${post.Retweet.User.id}`}\r\n                                    >\r\n                                        <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                                    </Link>\r\n                                )}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={<PostCardContent postData={post.Retweet.content}/>} // a tag x -> Link\r\n                            />\r\n                        </Card>\r\n                    )\r\n                    : (\r\n                        <Card.Meta\r\n                            avatar={(\r\n                                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\r\n                                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                                </Link>\r\n                            )}\r\n                            title={post.User.nickname}\r\n                            description={<PostCardContent postData={post.content} />} // a tag x -> Link\r\n                            loading={true}\r\n                        />\r\n                    )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                                            <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                                        </Link>\r\n                                    )}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n    }).isRequired,\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}