{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    display: -webkit-box;\\n    word-wrap:break-word; \\n    line-height: 1.2em;\\n    height: 12em; /* line-height \\uAC00 1.2em \\uC774\\uACE0 3\\uB77C\\uC778\\uC744 \\uC790\\uB974\\uAE30 \\uB54C\\uBB38\\uC5D0 height\\uB294 1.2em * 3 = 3.6em */\\n    whiteSpace: 'pre-wrap',\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\nvar ShowBox = styled.pre(_templateObject());\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData;\n\n  var stringLength = function (s, b, i, c) {\n    for (b = i = 0; c = s.charCodeAt(i++); b += c >> 11 ? 3 : c >> 7 ? 2 : 1) {\n      ;\n    }\n\n    return b;\n  }(postData);\n\n  var _useState = useState(false),\n      showMore = _useState[0],\n      setShowMore = _useState[1];\n\n  var cssChange = function cssChange() {\n    setShowMore(true);\n  };\n\n  return __jsx(\"div\", null, postData.split('\\n').length <= 7 && stringLength < 1000 ? __jsx(\"pre\", {\n    style: {\n      wordWrap: 'break-word',\n      whiteSpace: 'pre-wrap',\n      wordBreak: 'break-all'\n    }\n  }, postData.split(/(#[^\\s]+)/g).map(function (v) {\n    if (v.match(/#[^\\s]+/)) {\n      return __jsx(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        key: v\n      }, __jsx(\"a\", null, v));\n    }\n\n    return v;\n  })) : __jsx(\"div\", null, !showMore ? __jsx(ShowBox, null, postData.split(/(#[^\\s]+)/g).map(function (v) {\n    if (v.match(/#[^\\s]+/)) {\n      return __jsx(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        key: v\n      }, __jsx(\"a\", null, v));\n    }\n\n    return v;\n  }), __jsx(\"br\", null)) : __jsx(\"pre\", {\n    style: {\n      wordWrap: 'break-word',\n      whiteSpace: 'pre-wrap',\n      wordBreak: 'break-all'\n    }\n  }, postData.split(/(#[^\\s]+)/g).map(function (v) {\n    if (v.match(/#[^\\s]+/)) {\n      return __jsx(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        key: v\n      }, __jsx(\"a\", null, v));\n    }\n\n    return v;\n  })), !showMore ? __jsx(\"a\", {\n    onClick: cssChange\n  }, \"\\uB354\\uBCF4\\uAE30\") : __jsx(React.Fragment, null)));\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;","map":{"version":3,"sources":["C:/Users/mf311/IdeaProjects/NUTEE-WEB/front/components/PostCardContent.js"],"names":["React","useState","Link","PropTypes","styled","ShowBox","pre","PostCardContent","postData","stringLength","s","b","i","c","charCodeAt","showMore","setShowMore","cssChange","split","length","wordWrap","whiteSpace","wordBreak","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst ShowBox = styled.pre`\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    word-wrap:break-word; \r\n    line-height: 1.2em;\r\n    height: 12em; /* line-height 가 1.2em 이고 3라인을 자르기 때문에 height는 1.2em * 3 = 3.6em */\r\n    whiteSpace: 'pre-wrap',\r\n`;\r\n\r\nconst PostCardContent = ({ postData }) => {\r\n    const stringLength= (function(s,b,i,c){\r\n        for(b=i=0;c=s.charCodeAt(i++);b+=c>>11?3:c>>7?2:1);\r\n        return b\r\n    })(postData);\r\n\r\n    const [showMore,setShowMore] = useState(false);\r\n\r\n    const cssChange = () => {\r\n        setShowMore(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {(postData.split('\\n').length<= 7&&stringLength<1000)\r\n                ?\r\n                <pre style={{\r\n                    wordWrap: 'break-word',\r\n                    whiteSpace: 'pre-wrap',\r\n                    wordBreak:'break-all'\r\n                }}>\r\n                    {postData.split(/(#[^\\s]+)/g).map((v) => {\r\n                        if (v.match(/#[^\\s]+/)) {\r\n                            return (\r\n                                <Link\r\n                                    href={{pathname: '/hashtag', query: {tag: v.slice(1)}}}\r\n                                    as={`/hashtag/${v.slice(1)}`}\r\n                                 key={v}\r\n                                >\r\n                                 <a>{v}</a>\r\n                             </Link>\r\n                            );\r\n                        }\r\n                        return v;\r\n                    })}\r\n                </pre>\r\n                :\r\n                <div>\r\n                    {!showMore\r\n                        ?\r\n                        <ShowBox>\r\n                            {postData.split(/(#[^\\s]+)/g).map((v) => {\r\n                                if (v.match(/#[^\\s]+/)) {\r\n                                    return (\r\n                                        <Link\r\n                                            href={{pathname: '/hashtag', query: {tag: v.slice(1)}}}\r\n                                            as={`/hashtag/${v.slice(1)}`}\r\n                                            key={v}\r\n                                        >\r\n                                            <a>{v}</a>\r\n                                        </Link>\r\n                                    );\r\n                                }\r\n                                return v;\r\n                            })}\r\n                            <br/>\r\n                        </ShowBox>\r\n                        :\r\n                        <pre style={{\r\n                            wordWrap: 'break-word',\r\n                            whiteSpace: 'pre-wrap',\r\n                            wordBreak:'break-all'\r\n                        }}>\r\n                    {postData.split(/(#[^\\s]+)/g).map((v) => {\r\n                        if (v.match(/#[^\\s]+/)) {\r\n                            return (\r\n                                <Link\r\n                                    href={{pathname: '/hashtag', query: {tag: v.slice(1)}}}\r\n                                    as={`/hashtag/${v.slice(1)}`}\r\n                                    key={v}\r\n                                >\r\n                                    <a>{v}</a>\r\n                                </Link>\r\n                            );\r\n                        }\r\n                        return v;\r\n                    })}\r\n                </pre>\r\n                    }\r\n                    {!showMore?\r\n                        <a onClick={cssChange}>더보기</a>\r\n                        :\r\n                        <></>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nPostCardContent.propTypes = {\r\n    postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;"]},"metadata":{},"sourceType":"module"}