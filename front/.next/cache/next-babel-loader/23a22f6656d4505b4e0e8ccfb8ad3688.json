{"ast":null,"code":"import { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // post reducer의 데이터를 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // user reducer의 데이터를 수정\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('/post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(`/post/${postId}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["C:/Users/mf311/IdeaProjects/NUTEE-WEB/front/sagas/post.js"],"names":["all","fork","takeLatest","put","throttle","call","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","console","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","loadPostAPI","loadPost","watchLoadPost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({ // post reducer의 데이터를 수정\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({ // user reducer의 데이터를 수정\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\r\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id || 0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post('/post/images', formData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n    return axios.post(`/post/${postId}/retweet`, {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e,\r\n        });\r\n        alert(e.response && e.response.data);\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction removePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}`, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction loadPostAPI(postId) {\r\n    return axios.get(`/post/${postId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComments),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}